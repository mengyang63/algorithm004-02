class Solution {
    public int coinChange(int[] coins, int amount) {
        int max = amount + 1;             
        int[] dp = new int[amount + 1];  
        Arrays.fill(dp, max);  
        dp[0] = 0;   
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.length; j++) {
                if (coins[j] <= i) {
                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
         
    private int coinChange(int idxCoin, int[] coins, int amount) {//递归
        if (amount == 0)
            return 0;
        if (idxCoin < coins.length && amount > 0) {
            int maxVal = amount/coins[idxCoin];
            int minCost = Integer.MAX_VALUE;
            for (int x = 0; x <= maxVal; x++) {
                if (amount >= x * coins[idxCoin]) {
                    int res = coinChange(idxCoin + 1, coins, amount - x * coins[idxCoin]);
                    if (res != -1)
                        minCost = Math.min(minCost, res + x);
                }                    
            }           
            return (minCost == Integer.MAX_VALUE)? -1: minCost;
        }        
        return -1;
    }  

    private int coinChange(int[] arr , int[] coins, int amount) {//缓存+递归
       
        if(amount < 0 ){ return  -1;}
        if(amount == 0){return 0;}
        if(arr[amount - 1] != 0){
            return arr[amount - 1];
        }
        int min = Integer.MAX_VALUE;
        for(int cn : coins ){            
            int res = coinChange(arr,coins,amount - cn);
            if(res >= 0 && res < min){
                min = 1 + res;
            }
        }
        arr[amount -1] = (min == Integer.MAX_VALUE)? -1:min;
        return arr[amount - 1];
        
    }  

    private int 
    
    
    

}
