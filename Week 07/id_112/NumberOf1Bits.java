package datastruct.bitOperation;

/**
 191. 位1的个数
 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 示例 1：

 输入：00000000000000000000000000001011
 输出：3
 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 示例 2：

 输入：00000000000000000000000010000000
 输出：1
 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 示例 3：

 输入：11111111111111111111111111111101
 输出：31
 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

 *
 */
public class NumberOf1Bits {

    /**
     * 方法 1：循环和位移动
     算法

     这个方法比较直接。我们遍历数字的 32 位。如果某一位是 11 ，将计数器加一。

     我们使用 位掩码 来检查数字的第 i^{th}i
     th
     位。一开始，掩码 m=1m=1 因为 11 的二进制表示是

     0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 0001
     0000 0000 0000 0000 0000 0000 0000 0001

     显然，任何数字跟掩码 11 进行逻辑与运算，都可以让我们获得这个数字的最低位。检查下一位时，我们将掩码左移一位。

     0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 0010
     0000 0000 0000 0000 0000 0000 0000 0010

     并重复此过程。

     复杂度分析
        时间复杂度：O(1)O(1) 。运行时间依赖于数字 nn 的位数。由于这题中 nn 是一个 32 位数，所以运行时间是 O(1)O(1) 的。
        空间复杂度：O(1)O(1)。没有使用额外空间。

     *
     */
    public int hammingWeight(int n) {
        int bits = 0;
        int mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask)!= 0) {
                bits++;
            }
            mask <<= 1;
        }
        return bits;
    }

    /**
     * 方法 2：位操作的小技巧
     算法
     我们可以把前面的算法进行优化。我们不再检查数字的每一个位，而是不断把数字最后一个 11 反转，并把答案加一。当数字变成 00 的时候偶，我们就知道它没有 11 的位了，此时返回答案。
     这里关键的想法是对于任意数字 nn ，将 nn 和 n - 1n−1 做与运算，会把最后一个 11 的位变成 00 。为什么？考虑 nn 和 n - 1n−1 的二进制表示。

     复杂度分析
     时间复杂度：O(1)O(1) 。运行时间与 nn 中位为 11 的有关。在最坏情况下， nn 中所有位都是 11 。对于 32 位整数，运行时间是 O(1)O(1) 的。
     空间复杂度：O(1)O(1) 。没有使用额外空间。

     *
     */
    public int hammingWeight2(int n) {
        int sum = 0;
        while (n != 0) {
            sum++;
            n &= (n - 1);
        }
        return sum;
    }

}
